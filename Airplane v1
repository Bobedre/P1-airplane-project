#include <stdio.h>
#include <stdlib.h>
#include <strings.h>

#define MAX_ROW_SIZE 30
#define NUMBER_OF_PASSENGERS 181
#define MAX_AISLE_SIZE 7

typedef struct
{             
    int seat;    /* Seatnumber */
    int delay;   /* Countdown to when agent is allowed to do an action*/
    int luggage; /* True or false - to see if the specific agent has luggage or not (boolean) */
    int stow;    /* True or false - to see if the specific agent is done stowing    (boolean)*/ 
} passenger;


/* Prototyper */
void print_fly(int airplane[][7]);
void create_passengers(passenger * agents);
 

int main(void)
{
passenger agents[181];
int i=0,j=0,seat=0;
int iteration=0;

    /*  CONSTRUCTION OF AIRPLANE - The 0 symbolizes the middle row.  */
    int airplane[30][7] = {
                      {1,2,3,      0,   4,5,6   }, /* ROW 0  */
                      {7,8,9,      145, 10,11,12}, /* ROW 1  */
                      {13,14,15,   0,   16,17,18}, /* ROW 2  */
                      {19,20,21,   0,   22,23,24}, /* ROW 3  */
                      {25,26,27,   0,   28,29,30}, /* ROW 4  */
                      {31,32,33,   0,   34,35,36}, /* ROW 5  */
                      {37,38,39,   0,   40,41,42}, /* ROW 6  */
                      {43,44,45,   0,   46,47,48}, /* ROW 7  */
                      {49,50,51,   0,   52,53,54}, /* ROW 8  */
                      {55,56,57,   0,   58,59,60}, /* ROW 9  */
                      {61,62,63,   0,   64,65,66}, /* ROW 10 */
                      {67,68,69,   0,   70,71,72}, /* ROW 11 */
                      {73,74,75,   0,   76,77,78}, /* ROW 12 */
                      {79,80,81,   0,   82,83,84}, /* ROW 13 */
                      {85,86,87,   0,   88,89,90}, /* ROW 14 */
                      {91,92,93,   0,   94,95,96}, /* ROW 15 */
                      {97,98,99,   0,100,101,102}, /* ROW 16 */
                      {103,104,105,0,106,107,108}, /* ROW 17 */
                      {109,110,111,0,112,113,114}, /* ROW 18 */
                      {115,116,117,0,118,119,120}, /* ROW 19 */
                      {121,122,123,0,124,125,126}, /* ROW 20 */
                      {127,128,129,0,130,131,132}, /* ROW 21 */
                      {133,134,135,0,136,137,138}, /* ROW 22 */
                      {139,140,141,0,142,143,144}, /* ROW 23 */
                      {145,146,147,0,148,149,150}, /* ROW 24 */
                      {151,152,153,0,154,155,156}, /* ROW 25 */
                      {157,158,159,0,160,161,162}, /* ROW 26 */
                      {163,164,165,0,166,167,168}, /* ROW 27 */
                      {169,170,171,0,172,173,174}, /* ROW 28 */
                      {175,176,177,0,178,179,180}  /* ROW 29 */
                    };

    

    create_passengers(agents);   /* create_passenger adds values to the agents[i]  */

/* OUT COMMENT TO PRINT LIST OF AGENTS */    
/* 
for (i = 0; i < NUMBER_OF_PASSENGERS; i++)
{
    printf("%d", agents[i].seat);
    printf("\n");
}
*/

    while (airplane[24][0] != -1 ){ /* Runs as long as seat 145 isn't occupied - TEST */
        print_fly(airplane); /* Printer fly hver iteration for at se om det dur. Vi venter med at lave delays så hver iteration sker der en handling */
        for ( i = MAX_ROW_SIZE-1; i >= 0; i--)
        {
            if(airplane[i][3] != 0){  /* tjekker om der står en agent på pladsen i midtergangen. Den starter fra række 29*/
                if (agents[airplane[i][3]].delay==0){ /* Denne tjekker om agenten er i gang med noget */
                    
                    if(agents[airplane[i][3]].seat<=airplane[i][6]){ /* Tjekker om agenten står på den rigtige række */
                        if (agents[airplane[i][3]].stow == 0){ /* Tjekker om agenten har lagt sin taske på plads */
                            agents[airplane[i][3]].delay += 2; /* Ligger tid til delay på agenten */
                            agents[airplane[i][3]].stow = 1; /* Ændrer stow værdien fra 0 til 1 */
                        }
                        else if (agents[airplane[i][3]].stow == 1) { /* Tjekker om agenten har lagt sin taske på plads */
                            
                        
                            for (seat=0; ;seat++){
                                if (seat==3){
                                    seat++;
                                }

                                if (agents[airplane[i][3]].seat==airplane[i][seat]){ /* sætter passageren ind på plads og fylder sæddet med -1*/
                                    airplane[i][seat]=-1;
                                    break;
                                }
                                
                            }
                            airplane[i][3]=0; /*fjerne passageren fra midtergangen */
                        }
                        
                    }
                    else if(airplane[i+1][3]==0){ /* Tjekker om pladsen foran agenten er optaget */
                        airplane[i+1][3] = agents[airplane[i+1][3]].seat; /* Ændrer værdien på pladsen foran agenten til agentens værdi og ændrer den nuværende til 0 */
                        airplane[i][3]=0;
                    }
                }else /* Hvis agenten ikke har lov til at lave en handling endnu går delay 1 ned og programmet kigger på næste plads*/
                agents[airplane[i][3]].delay--;
            }
             
        

        }   
    }
return 0;
}

/*  assigns values to the agent individually. Every single agent is looped through to create struct array of all agents.  */
void create_passengers(passenger * agents)
{
    int i = 0;
    for (i = 0; i < NUMBER_OF_PASSENGERS; i++)
    {
        agents[i].seat = i;
        agents[i].delay = 0;
        agents[i].stow = 0;
    }
}
/*  print_fly loops through every single row and prints the current location of the seats and agents aboard (the agent position is altered in while loop in main)  */
void print_fly(int airplane[][7])
{
int i = 0,
    j = 0;
  
for (i = 0 ; i < MAX_ROW_SIZE ; i++){
    for (j = 0 ; j < 7 ; j++){
        printf(" %d\t",airplane[i][j]);
        }
        printf("\n");
    }
}
